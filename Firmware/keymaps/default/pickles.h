/*
    █▀▀▀█
     ■■■
    █▄▄▄█ list.com                     notification.h            Last modified: May 28, 2022
    ----------------------------------------------------------------------------------------

    This is the firmware for the IDK first edition keyboard. Designed and built by @t0kies.

    For more information please feel free to reachout to me in github
    http://github.com/t0kies
*/

#define time_per_frame 500      // This is the time in milliseconds between each frame
#define logo_frame_width 128    // bytes per frame
#define pickles_frame_width 128 // bytes per frame

uint8_t  frame_number = 0; // This is the frame number
uint32_t anim_timer   = 0; // This is the timer for the animation

static const char PROGMEM idle[3][pickles_frame_width] = { // 'pixil-frame-2, 32x32px
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x08, 0xe8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x3e, 0x49, 0x84, 0x10, 0xc9, 0xd1, 0x85, 0x00, 0x08, 0x55, 0x3e, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xcf, 0x20, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x7f, 0x3f, 0x1f, 0x1c, 0x18, 0xf0, 0x60, 0x38, 0x10, 0x30, 0x70, 0xf0, 0x20, 0x20, 0x40, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    },
    // 'pixil-frame-1, 32x32px
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x3e, 0x49, 0x80, 0x08, 0xc5, 0xc9, 0x81, 0x00, 0x08, 0x5d, 0x3e, 0x28, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xcf, 0x20, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x7f, 0x3f, 0x1f, 0x1c, 0x18, 0xf0, 0x60, 0x38, 0x08, 0x18, 0x70, 0xf0, 0x20, 0x20, 0x40, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    },
    // 'pixil-frame-0, 32x32px
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xe8, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x3e, 0x69, 0x84, 0x10, 0x89, 0x91, 0x85, 0x00, 0x08, 0x55, 0x3e, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xcf, 0x20, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x41, 0x3f, 0x1f, 0x1c, 0x18, 0xf0, 0xc0, 0x38, 0x30, 0x30, 0x70, 0xf0, 0x20, 0x20, 0x40, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    }};

static const char PROGMEM idk_logo[] = /* 32 * 32 logo */
    {0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0x70, 0x31, 0x81, 0xe1, 0xf8, 0xf8, 0xfc, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xf0, 0xf8, 0x78, 0x3c, 0x3c, 0x3c, 0x3c, 0xfc, 0xfc, 0xfc, 0xfc, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x1f, 0x1f, 0x1f, 0x1c, 0x1c, 0x1c, 0x1c, 0x1e, 0x1f, 0x0f, 0x0f, 0x07, 0x03, 0x00, 0x00, 0x00, 0x10, 0x7c, 0x7e, 0x7f, 0x7f, 0x07, 0x03, 0x38, 0x3c, 0x3c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7c, 0x7e, 0x7c, 0x7c, 0x38, 0x00, 0x00};

static void print_logo(void) {
    oled_write_raw_P(idk_logo, logo_frame_width);
}

void animate_pickles(void) {
    frame_number = (frame_number + 1) % 2;
    oled_write_raw_P(idle[frame_number], pickles_frame_width);
}

static void print_pickles(int POT_X, int POT_Y) {
    if (timer_elapsed32(anim_timer) > time_per_frame) {
        print_logo();
        oled_set_cursor(POT_X, POT_Y + 4);
        animate_pickles();
        anim_timer = timer_read32();
    }
}
